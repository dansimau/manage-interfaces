#!/bin/bash
#
# Manage multiple sets of interface configurations.
#
# daniel.simmons@tobias.tv
# 2014-06-24
#

#
# Called on script start.
#
__init() {

    # Define command directory locations
    config_directory="/etc/network/interfaces.d/"
    interfaces_file="/etc/network/interfaces"

    # List of interfaces that exist on this system
    interfaces=$(ip -o l |awk '{print $2}' |tr -d ':')
}

#
# Outputs contents of new interfaces file, based on /etc/network/interfaces.d
#
__generate_interfaces_config() {
    local buf

    # Build new interfaces file
    for iface in ${interfaces}; do
        if [ -f "${config_directory}${iface}" ]; then
            buf="${buf}"$'\n'"$(cat ${config_directory}${iface})" || exit
        fi
    done

    cat <<EOF
#
# WARNING: This file was autogenerated. Do not modify.
# See /etc/network/interfaces.d/README
#
EOF

    echo "$buf"
}

# ----

#
# Display usage.
#
_help() {
    echo "Usage: $0 set <ifname> <config>" >&2
    echo "       $0 show" >&2
    echo "       $0 save" >&2
    echo "       $0 reconfigure" >&2
    echo "" >&2
    echo "Commands:"
    echo "" >&2
    echo "  set <ifname> <config>    Update symlink in /etc/network/interfaces.d for" >&2
    echo "                           <ifname>, to point to config with name <config>." >&2
    echo "" >&2
    echo "  show                     Output interfaces config, based on interfaces" >&2
    echo "                           set at current config." >&2
    echo "" >&2
    echo "  save                     Write out the interfaces config to system default" >&2
    echo "                           location ($interfaces_file)."
    echo "" >&2
    echo "  reconfigure              Reconfigure the system's network configuration to" >&2
    echo "                           match the current interfaces file." >&2
    echo "" >&2
    return 99
}

#
# Set all network interfaces down and flush their IP addresses.
#
_reset-network() {
    for dev in $interfaces; do
        # Take the interface down
        ip link set $dev down
        # Flush IP addresses
        ip addr flush $dev
    done
}

#
# Reconfigure system networking based on /etc/network/interfaces.
#
_reconfigure() {

    # Take everything down
    ifdown -a

    # Force set down of all interfaces on the system and flush their assigned
    # addresses. This is required because ifdown ignores anything that is not
    # in /etc/network/interfaces. This can cause issues when bringing
    # interfaces back up.
    _reset-network

    # Bring everything back up from /etc/network/interfaces
    ifup -a
}

#
# Write out /etc/network/interfaces file, based on contents of
# /etc/network/interfaces.d/*.
#
_save() {
    # Write out new file, or fail
    __generate_interfaces_config >/etc/network/interfaces || exit

    echo "Wrote ${interfaces_file}."
    echo ""
    echo "Use \`$0 reconfigure\` to apply."
}

#
# Update interface configuration to point to config file with specified suffix.
#
_set() {
    local config
    local ethname

    if [ $# -lt 2 ]; then
        echo "Missing <iface> or <config>." >&2
        echo "See \`$0 help\`" >&2
        exit 1
    fi

    ethname=$1
    config=$2

    if [ ! -f "${config_directory}${ethname}_${config}" ]; then
        echo "Interface config does not exist (${PWD}/${ethname}_${config})"
        exit 1
    fi
    ln -sf "${config_directory}${ethname}_${config}" "${config_directory}$ethname"
}

#
# Output new interfaces config to stdout.
#
_show() {
    __generate_interfaces_config
}

# ----

func=$1
shift

# Show help/usage if the command is not recognised
if [ ! "$(type -t _$func)" == "function" ]; then
    func="help"
fi

__init

# Execute function, with args
_$func "$@"
